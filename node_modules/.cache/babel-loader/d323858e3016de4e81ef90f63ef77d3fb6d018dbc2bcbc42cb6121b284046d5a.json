{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://localhost:5001/api/tasks';\nexport const getTasks = () => axios.get(API_BASE_URL).then(response => {\n  return response.data;\n}).then(data => {\n  console.log(data);\n}).catch(error => {\n  console.log(error.response.data.error);\n});\nexport const addTask = task => axios.post(API_BASE_URL, task).catch(function (error) {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n  } else if (error.request) {\n    // The request was made but no response was received\n    // `error.request` is an instance of XMLHttpRequest in the browser \n    // and an instance of http.ClientRequest in node.js\n    console.log(error.request);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.log('Error', error.message);\n  }\n});\nexport const updateTask = (id, task) => axios.put(`${API_BASE_URL}/${id}`, task);\n\n//axios.interceptors.response.use(undefined, error=> {\n// const {status, data, config}= error.response;\n// if (status===404)\n// {history.push('/not found');}\n// if (status===400 && config.method === 'get' && data.errors.hasOwnProperty('id'))\n// {history.push('/not found');}\n// if (status===500)\n// {toast.error('Server error-ref terminal for more info!');}\n//})\n\naxios.interceptors.response.use(function (response) {\n  // Optional: Do something with response data\n  return response;\n}, function (error) {\n  // Do whatever you want with the response error here:\n\n  // But, be SURE to return the rejected promise, so the caller still has \n  // the option of additional specialized handling at the call-site:\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","API_BASE_URL","getTasks","get","then","response","data","console","log","catch","error","addTask","task","post","status","headers","request","message","updateTask","id","put","interceptors","use","Promise","reject"],"sources":["/Users/Mansoor/task-manager-app/src/services/taskService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://localhost:5001/api/tasks';\n\nexport const getTasks = () => axios.get(API_BASE_URL).then(response => {\n    return response.data\n })\n .then(data => {\n    console.log(data)\n })\n .catch(error => {\n    console.log(error.response.data.error)\n });\nexport const addTask = (task) => axios.post(API_BASE_URL, task).catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser \n      // and an instance of http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n   \n  });\nexport const updateTask = (id, task) => axios.put(`${API_BASE_URL}/${id}`, task);\n\n//axios.interceptors.response.use(undefined, error=> {\n   // const {status, data, config}= error.response;\n   // if (status===404)\n   // {history.push('/not found');}\n   // if (status===400 && config.method === 'get' && data.errors.hasOwnProperty('id'))\n   // {history.push('/not found');}\n   // if (status===500)\n   // {toast.error('Server error-ref terminal for more info!');}\n//})\n\naxios.interceptors.response.use(function (response) {\n    // Optional: Do something with response data\n    return response;\n  }, function (error) {\n    // Do whatever you want with the response error here:\n\n    // But, be SURE to return the rejected promise, so the caller still has \n    // the option of additional specialized handling at the call-site:\n    return Promise.reject(error);\n  });"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,kCAAkC;AAEvD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAMF,KAAK,CAACG,GAAG,CAACF,YAAY,CAAC,CAACG,IAAI,CAACC,QAAQ,IAAI;EACnE,OAAOA,QAAQ,CAACC,IAAI;AACvB,CAAC,CAAC,CACDF,IAAI,CAACE,IAAI,IAAI;EACXC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;AACpB,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;EACbH,OAAO,CAACC,GAAG,CAACE,KAAK,CAACL,QAAQ,CAACC,IAAI,CAACI,KAAK,CAAC;AACzC,CAAC,CAAC;AACH,OAAO,MAAMC,OAAO,GAAIC,IAAI,IAAKZ,KAAK,CAACa,IAAI,CAACZ,YAAY,EAAEW,IAAI,CAAC,CAACH,KAAK,CAAC,UAAUC,KAAK,EAAE;EACnF,IAAIA,KAAK,CAACL,QAAQ,EAAE;IAClB;IACA;IACAE,OAAO,CAACC,GAAG,CAACE,KAAK,CAACL,QAAQ,CAACC,IAAI,CAAC;IAChCC,OAAO,CAACC,GAAG,CAACE,KAAK,CAACL,QAAQ,CAACS,MAAM,CAAC;IAClCP,OAAO,CAACC,GAAG,CAACE,KAAK,CAACL,QAAQ,CAACU,OAAO,CAAC;EACrC,CAAC,MAAM,IAAIL,KAAK,CAACM,OAAO,EAAE;IACxB;IACA;IACA;IACAT,OAAO,CAACC,GAAG,CAACE,KAAK,CAACM,OAAO,CAAC;EAC5B,CAAC,MAAM;IACL;IACAT,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,KAAK,CAACO,OAAO,CAAC;EACrC;AAEF,CAAC,CAAC;AACJ,OAAO,MAAMC,UAAU,GAAGA,CAACC,EAAE,EAAEP,IAAI,KAAKZ,KAAK,CAACoB,GAAG,CAAE,GAAEnB,YAAa,IAAGkB,EAAG,EAAC,EAAEP,IAAI,CAAC;;AAEhF;AACG;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEAZ,KAAK,CAACqB,YAAY,CAAChB,QAAQ,CAACiB,GAAG,CAAC,UAAUjB,QAAQ,EAAE;EAChD;EACA,OAAOA,QAAQ;AACjB,CAAC,EAAE,UAAUK,KAAK,EAAE;EAClB;;EAEA;EACA;EACA,OAAOa,OAAO,CAACC,MAAM,CAACd,KAAK,CAAC;AAC9B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}